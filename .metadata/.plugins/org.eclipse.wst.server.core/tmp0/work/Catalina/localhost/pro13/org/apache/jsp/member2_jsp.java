/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-06-15 03:11:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import sec01.ex01.MemberDAO;
import sec01.ex01.MemberBean;

public final class member2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("sec01.ex01.MemberDAO");
    _jspx_imports_classes.add("sec01.ex01.MemberBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <!-- id가 m인 MemberBean 객체를 생성 -->\r\n");
      out.write("    <!-- == MemberBean m = new MemberBean(); -->\r\n");
      out.write("    ");
      sec01.ex01.MemberBean m = null;
      m = (sec01.ex01.MemberBean) _jspx_page_context.getAttribute("m", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (m == null){
        m = new sec01.ex01.MemberBean();
        _jspx_page_context.setAttribute("m", m, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("    ");
 
    	String id =request.getParameter("id");
    	String pwd =request.getParameter("pwd");
    	String name =request.getParameter("name");
    	String email =request.getParameter("email");
    	
    	// MemberBean 갹체를 생성한 후 외뤈 정보를 속성에 설정
    	// MemberBean m = new MemberBean(id, pwd, name, email);
    	// useBean 액션 태그로 생성한 MemberBean 객체를 가지고 회원 정보를 속성에 설정
    	m.setId(id);
    	m.setPwd(pwd);
    	m.setName(name);
    	m.setEmail(email);
    	
    	MemberDAO memberDAO = new MemberDAO();
    	
    	// addMember() - 회원 정보를 db 테이블에 추가 (m) - 회원 생성
    	memberDAO.addMember(m);
    	
    	// ListMembers() - 전체 회원 정보를 db 테이블에서 조회해 오는 메서드
    	List memberList = memberDAO.listMembers();
    
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>member.jsp(회원 등록창)</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<table align=\"center\" width=\"100%\">\r\n");
      out.write("		<tr align=\"center\" bgcolor=\"#99ccff\">\r\n");
      out.write("			<td width=\"7%\">아이디</td>\r\n");
      out.write("			<td width=\"7%\">비밀번호</td>\r\n");
      out.write("			<td width=\"5%\">이름</td>\r\n");
      out.write("			<td width=\"11%\">이메일</td>\r\n");
      out.write("			<td width=\"5%\">가입일</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

			// size() - List에 저장된 데이터 개수 - size() == 0? 데이터가 x (화원정보 x)
			if(memberList.size() == 0) {
		
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"5\">\r\n");
      out.write("			<p align=\"center\">\r\n");
      out.write("			<b>\r\n");
      out.write("				<span style=\"font-size: 9pt\">등록된 회원이 없습니다.</span>\r\n");
      out.write("			</b>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

			}
		// size() != 0 데이터가 0(회원 정보가 0)
			else{
				// for 반복문을 이용해 memberList에 저장된 memberBean 갹채를 한 개씩 가져와 각 속성에 회원 정보를 getter를 이용해 츌력
				for(int i = 0; i < memberList.size(); i++) {
					MemberBean bean = (MemberBean) memberList.get(i);
					
			
      out.write("\r\n");
      out.write("				<tr align=\"center\">\r\n");
      out.write("					<td>\r\n");
      out.write("						");
      out.print( bean.getId() );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						");
      out.print( bean.getPwd() );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						");
      out.print( bean.getName() );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						");
      out.print( bean.getEmail() );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						");
      out.print( bean.getJoinDate() );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					\r\n");
      out.write("				</tr>\r\n");
      out.write("		 	");

				} //  for문 끝
			
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		");

			} // if-else문 끝
		
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
